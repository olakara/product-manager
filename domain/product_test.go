package domain

import (
	"errors"
	"testing"

	"github.com/google/uuid"
)

func TestNewProductShouldReturnAProduct(t *testing.T) {

	product, err := NewProduct("product", 5.5)
	if product == nil {
		t.Error("Product should not be nil")
	}
	if err != nil {
		t.Error("Product should not be nil", err)
	}
}

func TestNewProductShouldReturnAProductWithName(t *testing.T) {
	product, err := NewProduct("product", 3.5)
	if product.Name != "product" {
		t.Error("Product name should be 'product'")
	}
	if err != nil {
		t.Error("Product should not be nil", err)
	}
}

func TestNewProductShouldReturnAProductWithAnAutoGeneratedId(t *testing.T) {
	product, err := NewProduct("product", 3.5)
	if product.Id == uuid.Nil || product.Id.String() == "" {
		t.Error("Product id should not be nil")
	}
	if err := uuid.Validate(product.Id.String()); err != nil {
		t.Error("Product id should be a valid uuid")
	}
	if err != nil {
		t.Error("Product should not be nil", err)
	}
}

func TestNewProductShouldReturnAProductWithNameAndPrice(t *testing.T) {
	product, err := NewProduct("product", 3.5)
	if product == nil {
		t.Error("Product should not be nil")
	}
	if product.Name != "product" {
		t.Error("Product name should be 'product'")
	}
	if product.Price != 3.5 {
		t.Error("Product price should be 3.5")
	}
	if err != nil {
		t.Error("Product should not be nil", err)
	}
}

func TestNewProductShouldReturnAnErrorWithNegativePrice(t *testing.T) {
	product, err := NewProduct("product", -3.5)
	if !errors.Is(err, ErrPriceNegative) {
		t.Error("Product Error", err)
	}
	if product != nil {
		t.Error("Product should be nil")
	}
}
